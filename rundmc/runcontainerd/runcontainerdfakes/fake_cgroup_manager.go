// Code generated by counterfeiter. DO NOT EDIT.
package runcontainerdfakes

import (
	"sync"

	"code.cloudfoundry.org/guardian/rundmc/runcontainerd"
)

type FakeCgroupManager struct {
	SetUseMemoryHierarchyStub        func(string) error
	setUseMemoryHierarchyMutex       sync.RWMutex
	setUseMemoryHierarchyArgsForCall []struct {
		arg1 string
	}
	setUseMemoryHierarchyReturns struct {
		result1 error
	}
	setUseMemoryHierarchyReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCgroupManager) SetUseMemoryHierarchy(arg1 string) error {
	fake.setUseMemoryHierarchyMutex.Lock()
	ret, specificReturn := fake.setUseMemoryHierarchyReturnsOnCall[len(fake.setUseMemoryHierarchyArgsForCall)]
	fake.setUseMemoryHierarchyArgsForCall = append(fake.setUseMemoryHierarchyArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetUseMemoryHierarchyStub
	fakeReturns := fake.setUseMemoryHierarchyReturns
	fake.recordInvocation("SetUseMemoryHierarchy", []interface{}{arg1})
	fake.setUseMemoryHierarchyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCgroupManager) SetUseMemoryHierarchyCallCount() int {
	fake.setUseMemoryHierarchyMutex.RLock()
	defer fake.setUseMemoryHierarchyMutex.RUnlock()
	return len(fake.setUseMemoryHierarchyArgsForCall)
}

func (fake *FakeCgroupManager) SetUseMemoryHierarchyCalls(stub func(string) error) {
	fake.setUseMemoryHierarchyMutex.Lock()
	defer fake.setUseMemoryHierarchyMutex.Unlock()
	fake.SetUseMemoryHierarchyStub = stub
}

func (fake *FakeCgroupManager) SetUseMemoryHierarchyArgsForCall(i int) string {
	fake.setUseMemoryHierarchyMutex.RLock()
	defer fake.setUseMemoryHierarchyMutex.RUnlock()
	argsForCall := fake.setUseMemoryHierarchyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCgroupManager) SetUseMemoryHierarchyReturns(result1 error) {
	fake.setUseMemoryHierarchyMutex.Lock()
	defer fake.setUseMemoryHierarchyMutex.Unlock()
	fake.SetUseMemoryHierarchyStub = nil
	fake.setUseMemoryHierarchyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCgroupManager) SetUseMemoryHierarchyReturnsOnCall(i int, result1 error) {
	fake.setUseMemoryHierarchyMutex.Lock()
	defer fake.setUseMemoryHierarchyMutex.Unlock()
	fake.SetUseMemoryHierarchyStub = nil
	if fake.setUseMemoryHierarchyReturnsOnCall == nil {
		fake.setUseMemoryHierarchyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setUseMemoryHierarchyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCgroupManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setUseMemoryHierarchyMutex.RLock()
	defer fake.setUseMemoryHierarchyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCgroupManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runcontainerd.CgroupManager = new(FakeCgroupManager)
