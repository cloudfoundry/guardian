// Code generated by counterfeiter. DO NOT EDIT.
package rundmcfakes

import (
	"sync"

	"code.cloudfoundry.org/garden"
	"code.cloudfoundry.org/guardian/rundmc"
)

type FakeCPUCgrouper struct {
	CleanupCgroupsStub        func(string) error
	cleanupCgroupsMutex       sync.RWMutex
	cleanupCgroupsArgsForCall []struct {
		arg1 string
	}
	cleanupCgroupsReturns struct {
		result1 error
	}
	cleanupCgroupsReturnsOnCall map[int]struct {
		result1 error
	}
	PrepareCgroupsStub        func(string) error
	prepareCgroupsMutex       sync.RWMutex
	prepareCgroupsArgsForCall []struct {
		arg1 string
	}
	prepareCgroupsReturns struct {
		result1 error
	}
	prepareCgroupsReturnsOnCall map[int]struct {
		result1 error
	}
	ReadBadCgroupUsageStub        func(string) (garden.ContainerCPUStat, error)
	readBadCgroupUsageMutex       sync.RWMutex
	readBadCgroupUsageArgsForCall []struct {
		arg1 string
	}
	readBadCgroupUsageReturns struct {
		result1 garden.ContainerCPUStat
		result2 error
	}
	readBadCgroupUsageReturnsOnCall map[int]struct {
		result1 garden.ContainerCPUStat
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCPUCgrouper) CleanupCgroups(arg1 string) error {
	fake.cleanupCgroupsMutex.Lock()
	ret, specificReturn := fake.cleanupCgroupsReturnsOnCall[len(fake.cleanupCgroupsArgsForCall)]
	fake.cleanupCgroupsArgsForCall = append(fake.cleanupCgroupsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CleanupCgroupsStub
	fakeReturns := fake.cleanupCgroupsReturns
	fake.recordInvocation("CleanupCgroups", []interface{}{arg1})
	fake.cleanupCgroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCPUCgrouper) CleanupCgroupsCallCount() int {
	fake.cleanupCgroupsMutex.RLock()
	defer fake.cleanupCgroupsMutex.RUnlock()
	return len(fake.cleanupCgroupsArgsForCall)
}

func (fake *FakeCPUCgrouper) CleanupCgroupsCalls(stub func(string) error) {
	fake.cleanupCgroupsMutex.Lock()
	defer fake.cleanupCgroupsMutex.Unlock()
	fake.CleanupCgroupsStub = stub
}

func (fake *FakeCPUCgrouper) CleanupCgroupsArgsForCall(i int) string {
	fake.cleanupCgroupsMutex.RLock()
	defer fake.cleanupCgroupsMutex.RUnlock()
	argsForCall := fake.cleanupCgroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCPUCgrouper) CleanupCgroupsReturns(result1 error) {
	fake.cleanupCgroupsMutex.Lock()
	defer fake.cleanupCgroupsMutex.Unlock()
	fake.CleanupCgroupsStub = nil
	fake.cleanupCgroupsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCPUCgrouper) CleanupCgroupsReturnsOnCall(i int, result1 error) {
	fake.cleanupCgroupsMutex.Lock()
	defer fake.cleanupCgroupsMutex.Unlock()
	fake.CleanupCgroupsStub = nil
	if fake.cleanupCgroupsReturnsOnCall == nil {
		fake.cleanupCgroupsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanupCgroupsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCPUCgrouper) PrepareCgroups(arg1 string) error {
	fake.prepareCgroupsMutex.Lock()
	ret, specificReturn := fake.prepareCgroupsReturnsOnCall[len(fake.prepareCgroupsArgsForCall)]
	fake.prepareCgroupsArgsForCall = append(fake.prepareCgroupsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.PrepareCgroupsStub
	fakeReturns := fake.prepareCgroupsReturns
	fake.recordInvocation("PrepareCgroups", []interface{}{arg1})
	fake.prepareCgroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCPUCgrouper) PrepareCgroupsCallCount() int {
	fake.prepareCgroupsMutex.RLock()
	defer fake.prepareCgroupsMutex.RUnlock()
	return len(fake.prepareCgroupsArgsForCall)
}

func (fake *FakeCPUCgrouper) PrepareCgroupsCalls(stub func(string) error) {
	fake.prepareCgroupsMutex.Lock()
	defer fake.prepareCgroupsMutex.Unlock()
	fake.PrepareCgroupsStub = stub
}

func (fake *FakeCPUCgrouper) PrepareCgroupsArgsForCall(i int) string {
	fake.prepareCgroupsMutex.RLock()
	defer fake.prepareCgroupsMutex.RUnlock()
	argsForCall := fake.prepareCgroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCPUCgrouper) PrepareCgroupsReturns(result1 error) {
	fake.prepareCgroupsMutex.Lock()
	defer fake.prepareCgroupsMutex.Unlock()
	fake.PrepareCgroupsStub = nil
	fake.prepareCgroupsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCPUCgrouper) PrepareCgroupsReturnsOnCall(i int, result1 error) {
	fake.prepareCgroupsMutex.Lock()
	defer fake.prepareCgroupsMutex.Unlock()
	fake.PrepareCgroupsStub = nil
	if fake.prepareCgroupsReturnsOnCall == nil {
		fake.prepareCgroupsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.prepareCgroupsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCPUCgrouper) ReadBadCgroupUsage(arg1 string) (garden.ContainerCPUStat, error) {
	fake.readBadCgroupUsageMutex.Lock()
	ret, specificReturn := fake.readBadCgroupUsageReturnsOnCall[len(fake.readBadCgroupUsageArgsForCall)]
	fake.readBadCgroupUsageArgsForCall = append(fake.readBadCgroupUsageArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadBadCgroupUsageStub
	fakeReturns := fake.readBadCgroupUsageReturns
	fake.recordInvocation("ReadBadCgroupUsage", []interface{}{arg1})
	fake.readBadCgroupUsageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCPUCgrouper) ReadBadCgroupUsageCallCount() int {
	fake.readBadCgroupUsageMutex.RLock()
	defer fake.readBadCgroupUsageMutex.RUnlock()
	return len(fake.readBadCgroupUsageArgsForCall)
}

func (fake *FakeCPUCgrouper) ReadBadCgroupUsageCalls(stub func(string) (garden.ContainerCPUStat, error)) {
	fake.readBadCgroupUsageMutex.Lock()
	defer fake.readBadCgroupUsageMutex.Unlock()
	fake.ReadBadCgroupUsageStub = stub
}

func (fake *FakeCPUCgrouper) ReadBadCgroupUsageArgsForCall(i int) string {
	fake.readBadCgroupUsageMutex.RLock()
	defer fake.readBadCgroupUsageMutex.RUnlock()
	argsForCall := fake.readBadCgroupUsageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCPUCgrouper) ReadBadCgroupUsageReturns(result1 garden.ContainerCPUStat, result2 error) {
	fake.readBadCgroupUsageMutex.Lock()
	defer fake.readBadCgroupUsageMutex.Unlock()
	fake.ReadBadCgroupUsageStub = nil
	fake.readBadCgroupUsageReturns = struct {
		result1 garden.ContainerCPUStat
		result2 error
	}{result1, result2}
}

func (fake *FakeCPUCgrouper) ReadBadCgroupUsageReturnsOnCall(i int, result1 garden.ContainerCPUStat, result2 error) {
	fake.readBadCgroupUsageMutex.Lock()
	defer fake.readBadCgroupUsageMutex.Unlock()
	fake.ReadBadCgroupUsageStub = nil
	if fake.readBadCgroupUsageReturnsOnCall == nil {
		fake.readBadCgroupUsageReturnsOnCall = make(map[int]struct {
			result1 garden.ContainerCPUStat
			result2 error
		})
	}
	fake.readBadCgroupUsageReturnsOnCall[i] = struct {
		result1 garden.ContainerCPUStat
		result2 error
	}{result1, result2}
}

func (fake *FakeCPUCgrouper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanupCgroupsMutex.RLock()
	defer fake.cleanupCgroupsMutex.RUnlock()
	fake.prepareCgroupsMutex.RLock()
	defer fake.prepareCgroupsMutex.RUnlock()
	fake.readBadCgroupUsageMutex.RLock()
	defer fake.readBadCgroupUsageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCPUCgrouper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rundmc.CPUCgrouper = new(FakeCPUCgrouper)
