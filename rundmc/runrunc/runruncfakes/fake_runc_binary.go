// Code generated by counterfeiter. DO NOT EDIT.
package runruncfakes

import (
	"os/exec"
	"sync"

	"code.cloudfoundry.org/guardian/rundmc/runrunc"
)

type FakeRuncBinary struct {
	DeleteCommandStub        func(string, bool, string) *exec.Cmd
	deleteCommandMutex       sync.RWMutex
	deleteCommandArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 string
	}
	deleteCommandReturns struct {
		result1 *exec.Cmd
	}
	deleteCommandReturnsOnCall map[int]struct {
		result1 *exec.Cmd
	}
	EventsCommandStub        func(string) *exec.Cmd
	eventsCommandMutex       sync.RWMutex
	eventsCommandArgsForCall []struct {
		arg1 string
	}
	eventsCommandReturns struct {
		result1 *exec.Cmd
	}
	eventsCommandReturnsOnCall map[int]struct {
		result1 *exec.Cmd
	}
	ExecCommandStub        func(string, string, string) *exec.Cmd
	execCommandMutex       sync.RWMutex
	execCommandArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	execCommandReturns struct {
		result1 *exec.Cmd
	}
	execCommandReturnsOnCall map[int]struct {
		result1 *exec.Cmd
	}
	RunCommandStub        func(string, string, string, string, []string) *exec.Cmd
	runCommandMutex       sync.RWMutex
	runCommandArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 []string
	}
	runCommandReturns struct {
		result1 *exec.Cmd
	}
	runCommandReturnsOnCall map[int]struct {
		result1 *exec.Cmd
	}
	StateCommandStub        func(string, string) *exec.Cmd
	stateCommandMutex       sync.RWMutex
	stateCommandArgsForCall []struct {
		arg1 string
		arg2 string
	}
	stateCommandReturns struct {
		result1 *exec.Cmd
	}
	stateCommandReturnsOnCall map[int]struct {
		result1 *exec.Cmd
	}
	StatsCommandStub        func(string, string) *exec.Cmd
	statsCommandMutex       sync.RWMutex
	statsCommandArgsForCall []struct {
		arg1 string
		arg2 string
	}
	statsCommandReturns struct {
		result1 *exec.Cmd
	}
	statsCommandReturnsOnCall map[int]struct {
		result1 *exec.Cmd
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRuncBinary) DeleteCommand(arg1 string, arg2 bool, arg3 string) *exec.Cmd {
	fake.deleteCommandMutex.Lock()
	ret, specificReturn := fake.deleteCommandReturnsOnCall[len(fake.deleteCommandArgsForCall)]
	fake.deleteCommandArgsForCall = append(fake.deleteCommandArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteCommandStub
	fakeReturns := fake.deleteCommandReturns
	fake.recordInvocation("DeleteCommand", []interface{}{arg1, arg2, arg3})
	fake.deleteCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRuncBinary) DeleteCommandCallCount() int {
	fake.deleteCommandMutex.RLock()
	defer fake.deleteCommandMutex.RUnlock()
	return len(fake.deleteCommandArgsForCall)
}

func (fake *FakeRuncBinary) DeleteCommandCalls(stub func(string, bool, string) *exec.Cmd) {
	fake.deleteCommandMutex.Lock()
	defer fake.deleteCommandMutex.Unlock()
	fake.DeleteCommandStub = stub
}

func (fake *FakeRuncBinary) DeleteCommandArgsForCall(i int) (string, bool, string) {
	fake.deleteCommandMutex.RLock()
	defer fake.deleteCommandMutex.RUnlock()
	argsForCall := fake.deleteCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRuncBinary) DeleteCommandReturns(result1 *exec.Cmd) {
	fake.deleteCommandMutex.Lock()
	defer fake.deleteCommandMutex.Unlock()
	fake.DeleteCommandStub = nil
	fake.deleteCommandReturns = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) DeleteCommandReturnsOnCall(i int, result1 *exec.Cmd) {
	fake.deleteCommandMutex.Lock()
	defer fake.deleteCommandMutex.Unlock()
	fake.DeleteCommandStub = nil
	if fake.deleteCommandReturnsOnCall == nil {
		fake.deleteCommandReturnsOnCall = make(map[int]struct {
			result1 *exec.Cmd
		})
	}
	fake.deleteCommandReturnsOnCall[i] = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) EventsCommand(arg1 string) *exec.Cmd {
	fake.eventsCommandMutex.Lock()
	ret, specificReturn := fake.eventsCommandReturnsOnCall[len(fake.eventsCommandArgsForCall)]
	fake.eventsCommandArgsForCall = append(fake.eventsCommandArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.EventsCommandStub
	fakeReturns := fake.eventsCommandReturns
	fake.recordInvocation("EventsCommand", []interface{}{arg1})
	fake.eventsCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRuncBinary) EventsCommandCallCount() int {
	fake.eventsCommandMutex.RLock()
	defer fake.eventsCommandMutex.RUnlock()
	return len(fake.eventsCommandArgsForCall)
}

func (fake *FakeRuncBinary) EventsCommandCalls(stub func(string) *exec.Cmd) {
	fake.eventsCommandMutex.Lock()
	defer fake.eventsCommandMutex.Unlock()
	fake.EventsCommandStub = stub
}

func (fake *FakeRuncBinary) EventsCommandArgsForCall(i int) string {
	fake.eventsCommandMutex.RLock()
	defer fake.eventsCommandMutex.RUnlock()
	argsForCall := fake.eventsCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRuncBinary) EventsCommandReturns(result1 *exec.Cmd) {
	fake.eventsCommandMutex.Lock()
	defer fake.eventsCommandMutex.Unlock()
	fake.EventsCommandStub = nil
	fake.eventsCommandReturns = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) EventsCommandReturnsOnCall(i int, result1 *exec.Cmd) {
	fake.eventsCommandMutex.Lock()
	defer fake.eventsCommandMutex.Unlock()
	fake.EventsCommandStub = nil
	if fake.eventsCommandReturnsOnCall == nil {
		fake.eventsCommandReturnsOnCall = make(map[int]struct {
			result1 *exec.Cmd
		})
	}
	fake.eventsCommandReturnsOnCall[i] = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) ExecCommand(arg1 string, arg2 string, arg3 string) *exec.Cmd {
	fake.execCommandMutex.Lock()
	ret, specificReturn := fake.execCommandReturnsOnCall[len(fake.execCommandArgsForCall)]
	fake.execCommandArgsForCall = append(fake.execCommandArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ExecCommandStub
	fakeReturns := fake.execCommandReturns
	fake.recordInvocation("ExecCommand", []interface{}{arg1, arg2, arg3})
	fake.execCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRuncBinary) ExecCommandCallCount() int {
	fake.execCommandMutex.RLock()
	defer fake.execCommandMutex.RUnlock()
	return len(fake.execCommandArgsForCall)
}

func (fake *FakeRuncBinary) ExecCommandCalls(stub func(string, string, string) *exec.Cmd) {
	fake.execCommandMutex.Lock()
	defer fake.execCommandMutex.Unlock()
	fake.ExecCommandStub = stub
}

func (fake *FakeRuncBinary) ExecCommandArgsForCall(i int) (string, string, string) {
	fake.execCommandMutex.RLock()
	defer fake.execCommandMutex.RUnlock()
	argsForCall := fake.execCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRuncBinary) ExecCommandReturns(result1 *exec.Cmd) {
	fake.execCommandMutex.Lock()
	defer fake.execCommandMutex.Unlock()
	fake.ExecCommandStub = nil
	fake.execCommandReturns = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) ExecCommandReturnsOnCall(i int, result1 *exec.Cmd) {
	fake.execCommandMutex.Lock()
	defer fake.execCommandMutex.Unlock()
	fake.ExecCommandStub = nil
	if fake.execCommandReturnsOnCall == nil {
		fake.execCommandReturnsOnCall = make(map[int]struct {
			result1 *exec.Cmd
		})
	}
	fake.execCommandReturnsOnCall[i] = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) RunCommand(arg1 string, arg2 string, arg3 string, arg4 string, arg5 []string) *exec.Cmd {
	var arg5Copy []string
	if arg5 != nil {
		arg5Copy = make([]string, len(arg5))
		copy(arg5Copy, arg5)
	}
	fake.runCommandMutex.Lock()
	ret, specificReturn := fake.runCommandReturnsOnCall[len(fake.runCommandArgsForCall)]
	fake.runCommandArgsForCall = append(fake.runCommandArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 []string
	}{arg1, arg2, arg3, arg4, arg5Copy})
	stub := fake.RunCommandStub
	fakeReturns := fake.runCommandReturns
	fake.recordInvocation("RunCommand", []interface{}{arg1, arg2, arg3, arg4, arg5Copy})
	fake.runCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRuncBinary) RunCommandCallCount() int {
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	return len(fake.runCommandArgsForCall)
}

func (fake *FakeRuncBinary) RunCommandCalls(stub func(string, string, string, string, []string) *exec.Cmd) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = stub
}

func (fake *FakeRuncBinary) RunCommandArgsForCall(i int) (string, string, string, string, []string) {
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	argsForCall := fake.runCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeRuncBinary) RunCommandReturns(result1 *exec.Cmd) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = nil
	fake.runCommandReturns = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) RunCommandReturnsOnCall(i int, result1 *exec.Cmd) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = nil
	if fake.runCommandReturnsOnCall == nil {
		fake.runCommandReturnsOnCall = make(map[int]struct {
			result1 *exec.Cmd
		})
	}
	fake.runCommandReturnsOnCall[i] = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) StateCommand(arg1 string, arg2 string) *exec.Cmd {
	fake.stateCommandMutex.Lock()
	ret, specificReturn := fake.stateCommandReturnsOnCall[len(fake.stateCommandArgsForCall)]
	fake.stateCommandArgsForCall = append(fake.stateCommandArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.StateCommandStub
	fakeReturns := fake.stateCommandReturns
	fake.recordInvocation("StateCommand", []interface{}{arg1, arg2})
	fake.stateCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRuncBinary) StateCommandCallCount() int {
	fake.stateCommandMutex.RLock()
	defer fake.stateCommandMutex.RUnlock()
	return len(fake.stateCommandArgsForCall)
}

func (fake *FakeRuncBinary) StateCommandCalls(stub func(string, string) *exec.Cmd) {
	fake.stateCommandMutex.Lock()
	defer fake.stateCommandMutex.Unlock()
	fake.StateCommandStub = stub
}

func (fake *FakeRuncBinary) StateCommandArgsForCall(i int) (string, string) {
	fake.stateCommandMutex.RLock()
	defer fake.stateCommandMutex.RUnlock()
	argsForCall := fake.stateCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRuncBinary) StateCommandReturns(result1 *exec.Cmd) {
	fake.stateCommandMutex.Lock()
	defer fake.stateCommandMutex.Unlock()
	fake.StateCommandStub = nil
	fake.stateCommandReturns = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) StateCommandReturnsOnCall(i int, result1 *exec.Cmd) {
	fake.stateCommandMutex.Lock()
	defer fake.stateCommandMutex.Unlock()
	fake.StateCommandStub = nil
	if fake.stateCommandReturnsOnCall == nil {
		fake.stateCommandReturnsOnCall = make(map[int]struct {
			result1 *exec.Cmd
		})
	}
	fake.stateCommandReturnsOnCall[i] = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) StatsCommand(arg1 string, arg2 string) *exec.Cmd {
	fake.statsCommandMutex.Lock()
	ret, specificReturn := fake.statsCommandReturnsOnCall[len(fake.statsCommandArgsForCall)]
	fake.statsCommandArgsForCall = append(fake.statsCommandArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.StatsCommandStub
	fakeReturns := fake.statsCommandReturns
	fake.recordInvocation("StatsCommand", []interface{}{arg1, arg2})
	fake.statsCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRuncBinary) StatsCommandCallCount() int {
	fake.statsCommandMutex.RLock()
	defer fake.statsCommandMutex.RUnlock()
	return len(fake.statsCommandArgsForCall)
}

func (fake *FakeRuncBinary) StatsCommandCalls(stub func(string, string) *exec.Cmd) {
	fake.statsCommandMutex.Lock()
	defer fake.statsCommandMutex.Unlock()
	fake.StatsCommandStub = stub
}

func (fake *FakeRuncBinary) StatsCommandArgsForCall(i int) (string, string) {
	fake.statsCommandMutex.RLock()
	defer fake.statsCommandMutex.RUnlock()
	argsForCall := fake.statsCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRuncBinary) StatsCommandReturns(result1 *exec.Cmd) {
	fake.statsCommandMutex.Lock()
	defer fake.statsCommandMutex.Unlock()
	fake.StatsCommandStub = nil
	fake.statsCommandReturns = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) StatsCommandReturnsOnCall(i int, result1 *exec.Cmd) {
	fake.statsCommandMutex.Lock()
	defer fake.statsCommandMutex.Unlock()
	fake.StatsCommandStub = nil
	if fake.statsCommandReturnsOnCall == nil {
		fake.statsCommandReturnsOnCall = make(map[int]struct {
			result1 *exec.Cmd
		})
	}
	fake.statsCommandReturnsOnCall[i] = struct {
		result1 *exec.Cmd
	}{result1}
}

func (fake *FakeRuncBinary) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteCommandMutex.RLock()
	defer fake.deleteCommandMutex.RUnlock()
	fake.eventsCommandMutex.RLock()
	defer fake.eventsCommandMutex.RUnlock()
	fake.execCommandMutex.RLock()
	defer fake.execCommandMutex.RUnlock()
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	fake.stateCommandMutex.RLock()
	defer fake.stateCommandMutex.RUnlock()
	fake.statsCommandMutex.RLock()
	defer fake.statsCommandMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRuncBinary) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runrunc.RuncBinary = new(FakeRuncBinary)
