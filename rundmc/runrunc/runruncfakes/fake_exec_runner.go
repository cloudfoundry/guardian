// This file was generated by counterfeiter
package runruncfakes

import (
	"sync"

	"code.cloudfoundry.org/garden"
	"code.cloudfoundry.org/guardian/rundmc/runrunc"
	"code.cloudfoundry.org/lager"
)

type FakeExecRunner struct {
	RunStub        func(log lager.Logger, passedID string, spec *runrunc.PreparedSpec, bundlePath, processesPath, handle string, tty *garden.TTYSpec, io garden.ProcessIO) (garden.Process, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		log           lager.Logger
		passedID      string
		spec          *runrunc.PreparedSpec
		bundlePath    string
		processesPath string
		handle        string
		tty           *garden.TTYSpec
		io            garden.ProcessIO
	}
	runReturns struct {
		result1 garden.Process
		result2 error
	}
	AttachStub        func(log lager.Logger, processID string, io garden.ProcessIO, processesPath string) (garden.Process, error)
	attachMutex       sync.RWMutex
	attachArgsForCall []struct {
		log           lager.Logger
		processID     string
		io            garden.ProcessIO
		processesPath string
	}
	attachReturns struct {
		result1 garden.Process
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExecRunner) Run(log lager.Logger, passedID string, spec *runrunc.PreparedSpec, bundlePath string, processesPath string, handle string, tty *garden.TTYSpec, io garden.ProcessIO) (garden.Process, error) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		log           lager.Logger
		passedID      string
		spec          *runrunc.PreparedSpec
		bundlePath    string
		processesPath string
		handle        string
		tty           *garden.TTYSpec
		io            garden.ProcessIO
	}{log, passedID, spec, bundlePath, processesPath, handle, tty, io})
	fake.recordInvocation("Run", []interface{}{log, passedID, spec, bundlePath, processesPath, handle, tty, io})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(log, passedID, spec, bundlePath, processesPath, handle, tty, io)
	}
	return fake.runReturns.result1, fake.runReturns.result2
}

func (fake *FakeExecRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeExecRunner) RunArgsForCall(i int) (lager.Logger, string, *runrunc.PreparedSpec, string, string, string, *garden.TTYSpec, garden.ProcessIO) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].log, fake.runArgsForCall[i].passedID, fake.runArgsForCall[i].spec, fake.runArgsForCall[i].bundlePath, fake.runArgsForCall[i].processesPath, fake.runArgsForCall[i].handle, fake.runArgsForCall[i].tty, fake.runArgsForCall[i].io
}

func (fake *FakeExecRunner) RunReturns(result1 garden.Process, result2 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 garden.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeExecRunner) Attach(log lager.Logger, processID string, io garden.ProcessIO, processesPath string) (garden.Process, error) {
	fake.attachMutex.Lock()
	fake.attachArgsForCall = append(fake.attachArgsForCall, struct {
		log           lager.Logger
		processID     string
		io            garden.ProcessIO
		processesPath string
	}{log, processID, io, processesPath})
	fake.recordInvocation("Attach", []interface{}{log, processID, io, processesPath})
	fake.attachMutex.Unlock()
	if fake.AttachStub != nil {
		return fake.AttachStub(log, processID, io, processesPath)
	}
	return fake.attachReturns.result1, fake.attachReturns.result2
}

func (fake *FakeExecRunner) AttachCallCount() int {
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	return len(fake.attachArgsForCall)
}

func (fake *FakeExecRunner) AttachArgsForCall(i int) (lager.Logger, string, garden.ProcessIO, string) {
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	return fake.attachArgsForCall[i].log, fake.attachArgsForCall[i].processID, fake.attachArgsForCall[i].io, fake.attachArgsForCall[i].processesPath
}

func (fake *FakeExecRunner) AttachReturns(result1 garden.Process, result2 error) {
	fake.AttachStub = nil
	fake.attachReturns = struct {
		result1 garden.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeExecRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.attachMutex.RLock()
	defer fake.attachMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeExecRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runrunc.ExecRunner = new(FakeExecRunner)
