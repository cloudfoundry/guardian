// This file was generated by counterfeiter
package subnetsfakes

import (
	"net"
	"sync"

	"code.cloudfoundry.org/guardian/kawasaki/subnets"
)

type FakeSubnetSelector struct {
	SelectSubnetStub        func(dynamic *net.IPNet, existing []*net.IPNet) (*net.IPNet, error)
	selectSubnetMutex       sync.RWMutex
	selectSubnetArgsForCall []struct {
		dynamic  *net.IPNet
		existing []*net.IPNet
	}
	selectSubnetReturns struct {
		result1 *net.IPNet
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSubnetSelector) SelectSubnet(dynamic *net.IPNet, existing []*net.IPNet) (*net.IPNet, error) {
	var existingCopy []*net.IPNet
	if existing != nil {
		existingCopy = make([]*net.IPNet, len(existing))
		copy(existingCopy, existing)
	}
	fake.selectSubnetMutex.Lock()
	fake.selectSubnetArgsForCall = append(fake.selectSubnetArgsForCall, struct {
		dynamic  *net.IPNet
		existing []*net.IPNet
	}{dynamic, existingCopy})
	fake.recordInvocation("SelectSubnet", []interface{}{dynamic, existingCopy})
	fake.selectSubnetMutex.Unlock()
	if fake.SelectSubnetStub != nil {
		return fake.SelectSubnetStub(dynamic, existing)
	}
	return fake.selectSubnetReturns.result1, fake.selectSubnetReturns.result2
}

func (fake *FakeSubnetSelector) SelectSubnetCallCount() int {
	fake.selectSubnetMutex.RLock()
	defer fake.selectSubnetMutex.RUnlock()
	return len(fake.selectSubnetArgsForCall)
}

func (fake *FakeSubnetSelector) SelectSubnetArgsForCall(i int) (*net.IPNet, []*net.IPNet) {
	fake.selectSubnetMutex.RLock()
	defer fake.selectSubnetMutex.RUnlock()
	return fake.selectSubnetArgsForCall[i].dynamic, fake.selectSubnetArgsForCall[i].existing
}

func (fake *FakeSubnetSelector) SelectSubnetReturns(result1 *net.IPNet, result2 error) {
	fake.SelectSubnetStub = nil
	fake.selectSubnetReturns = struct {
		result1 *net.IPNet
		result2 error
	}{result1, result2}
}

func (fake *FakeSubnetSelector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.selectSubnetMutex.RLock()
	defer fake.selectSubnetMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSubnetSelector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ subnets.SubnetSelector = new(FakeSubnetSelector)
