// Code generated by counterfeiter. DO NOT EDIT.
package kawasakifakes

import (
	"sync"

	"code.cloudfoundry.org/guardian/kawasaki"
	lager "code.cloudfoundry.org/lager/v3"
)

type FakeConfigurer struct {
	ApplyStub        func(lager.Logger, kawasaki.NetworkConfig, int) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 lager.Logger
		arg2 kawasaki.NetworkConfig
		arg3 int
	}
	applyReturns struct {
		result1 error
	}
	applyReturnsOnCall map[int]struct {
		result1 error
	}
	DestroyBridgeStub        func(lager.Logger, kawasaki.NetworkConfig) error
	destroyBridgeMutex       sync.RWMutex
	destroyBridgeArgsForCall []struct {
		arg1 lager.Logger
		arg2 kawasaki.NetworkConfig
	}
	destroyBridgeReturns struct {
		result1 error
	}
	destroyBridgeReturnsOnCall map[int]struct {
		result1 error
	}
	DestroyIPTablesRulesStub        func(lager.Logger, kawasaki.NetworkConfig) error
	destroyIPTablesRulesMutex       sync.RWMutex
	destroyIPTablesRulesArgsForCall []struct {
		arg1 lager.Logger
		arg2 kawasaki.NetworkConfig
	}
	destroyIPTablesRulesReturns struct {
		result1 error
	}
	destroyIPTablesRulesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfigurer) Apply(arg1 lager.Logger, arg2 kawasaki.NetworkConfig, arg3 int) error {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 lager.Logger
		arg2 kawasaki.NetworkConfig
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1, arg2, arg3})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigurer) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeConfigurer) ApplyCalls(stub func(lager.Logger, kawasaki.NetworkConfig, int) error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *FakeConfigurer) ApplyArgsForCall(i int) (lager.Logger, kawasaki.NetworkConfig, int) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeConfigurer) ApplyReturns(result1 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfigurer) ApplyReturnsOnCall(i int, result1 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfigurer) DestroyBridge(arg1 lager.Logger, arg2 kawasaki.NetworkConfig) error {
	fake.destroyBridgeMutex.Lock()
	ret, specificReturn := fake.destroyBridgeReturnsOnCall[len(fake.destroyBridgeArgsForCall)]
	fake.destroyBridgeArgsForCall = append(fake.destroyBridgeArgsForCall, struct {
		arg1 lager.Logger
		arg2 kawasaki.NetworkConfig
	}{arg1, arg2})
	stub := fake.DestroyBridgeStub
	fakeReturns := fake.destroyBridgeReturns
	fake.recordInvocation("DestroyBridge", []interface{}{arg1, arg2})
	fake.destroyBridgeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigurer) DestroyBridgeCallCount() int {
	fake.destroyBridgeMutex.RLock()
	defer fake.destroyBridgeMutex.RUnlock()
	return len(fake.destroyBridgeArgsForCall)
}

func (fake *FakeConfigurer) DestroyBridgeCalls(stub func(lager.Logger, kawasaki.NetworkConfig) error) {
	fake.destroyBridgeMutex.Lock()
	defer fake.destroyBridgeMutex.Unlock()
	fake.DestroyBridgeStub = stub
}

func (fake *FakeConfigurer) DestroyBridgeArgsForCall(i int) (lager.Logger, kawasaki.NetworkConfig) {
	fake.destroyBridgeMutex.RLock()
	defer fake.destroyBridgeMutex.RUnlock()
	argsForCall := fake.destroyBridgeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConfigurer) DestroyBridgeReturns(result1 error) {
	fake.destroyBridgeMutex.Lock()
	defer fake.destroyBridgeMutex.Unlock()
	fake.DestroyBridgeStub = nil
	fake.destroyBridgeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfigurer) DestroyBridgeReturnsOnCall(i int, result1 error) {
	fake.destroyBridgeMutex.Lock()
	defer fake.destroyBridgeMutex.Unlock()
	fake.DestroyBridgeStub = nil
	if fake.destroyBridgeReturnsOnCall == nil {
		fake.destroyBridgeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.destroyBridgeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfigurer) DestroyIPTablesRules(arg1 lager.Logger, arg2 kawasaki.NetworkConfig) error {
	fake.destroyIPTablesRulesMutex.Lock()
	ret, specificReturn := fake.destroyIPTablesRulesReturnsOnCall[len(fake.destroyIPTablesRulesArgsForCall)]
	fake.destroyIPTablesRulesArgsForCall = append(fake.destroyIPTablesRulesArgsForCall, struct {
		arg1 lager.Logger
		arg2 kawasaki.NetworkConfig
	}{arg1, arg2})
	stub := fake.DestroyIPTablesRulesStub
	fakeReturns := fake.destroyIPTablesRulesReturns
	fake.recordInvocation("DestroyIPTablesRules", []interface{}{arg1, arg2})
	fake.destroyIPTablesRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfigurer) DestroyIPTablesRulesCallCount() int {
	fake.destroyIPTablesRulesMutex.RLock()
	defer fake.destroyIPTablesRulesMutex.RUnlock()
	return len(fake.destroyIPTablesRulesArgsForCall)
}

func (fake *FakeConfigurer) DestroyIPTablesRulesCalls(stub func(lager.Logger, kawasaki.NetworkConfig) error) {
	fake.destroyIPTablesRulesMutex.Lock()
	defer fake.destroyIPTablesRulesMutex.Unlock()
	fake.DestroyIPTablesRulesStub = stub
}

func (fake *FakeConfigurer) DestroyIPTablesRulesArgsForCall(i int) (lager.Logger, kawasaki.NetworkConfig) {
	fake.destroyIPTablesRulesMutex.RLock()
	defer fake.destroyIPTablesRulesMutex.RUnlock()
	argsForCall := fake.destroyIPTablesRulesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeConfigurer) DestroyIPTablesRulesReturns(result1 error) {
	fake.destroyIPTablesRulesMutex.Lock()
	defer fake.destroyIPTablesRulesMutex.Unlock()
	fake.DestroyIPTablesRulesStub = nil
	fake.destroyIPTablesRulesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfigurer) DestroyIPTablesRulesReturnsOnCall(i int, result1 error) {
	fake.destroyIPTablesRulesMutex.Lock()
	defer fake.destroyIPTablesRulesMutex.Unlock()
	fake.DestroyIPTablesRulesStub = nil
	if fake.destroyIPTablesRulesReturnsOnCall == nil {
		fake.destroyIPTablesRulesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.destroyIPTablesRulesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfigurer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.destroyBridgeMutex.RLock()
	defer fake.destroyBridgeMutex.RUnlock()
	fake.destroyIPTablesRulesMutex.RLock()
	defer fake.destroyIPTablesRulesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfigurer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kawasaki.Configurer = new(FakeConfigurer)
